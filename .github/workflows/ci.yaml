name: Continuous integration and publication

on:
  push:
    branches:
      - master
      - develop
  schedule:
    - cron: '15 * * * *'
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check image upstreams for changes in master
      id: version
      run: |
        DECONZ_APPVERSION=$(curl -s https://raw.githubusercontent.com/deconz-community/deconz-docker/main/version.json | grep 'version' | head -n1 | awk '{print $2;}' | sed 's/[",]//g')
        echo deCONZ version is $DECONZ_APPVERSION.
        if [[ -z $(cat ./.github/deconz_version) ||  $DECONZ_APPVERSION != $(cat ./.github/deconz_version) ]]; then
            echo "DeCONZ has changed, previous version was $(cat ./.github/deconz_version)"
            echo "deconz_changed=true" >> $GITHUB_ENV
            echo "version_change=true" >> $GITHUB_ENV
            echo "$DECONZ_APPVERSION" > ./.github/deconz_version;
        else
            echo "deconz_changed=false" >> $GITHUB_ENV;
            echo "DeCONZ has not changed, still at $(cat ./.github/deconz_version)"
        fi
        OPENHAB_HEAD=$(git ls-remote https://github.com/openhab/openhab-docker refs/heads/main | head -n1 |awk '{print $1;}')
        echo OpenHAB head commit is $OPENHAB_HEAD.
        if [[ -z $(cat ./.github/openhab_head) || $OPENHAB_HEAD != "$(cat ./.github/openhab_head)" ]]; then
            echo "OpenHAB has changed, previous one was $(cat ./.github/openhab_head)"
            echo "openhab_changed=true" >> $GITHUB_ENV
            echo "version_change=true" >> $GITHUB_ENV
            echo "$OPENHAB_HEAD" > ./.github/openhab_head;
        else
            echo "openhab_changed=false" >> $GITHUB_ENV;
            echo "OpenHAB has not changed, still at $(cat ./.github/openhab_head)"

        fi
        echo  "DeCONZ changed: ${{ env.deconz_changed }}";
        echo "OpenHAB changed: ${{ env.openhab_changed }}";
        echo "Version change: ${{ env.version_change }}";

    - name: Update deCONZ appVersion
      if: env.deconz_changed == 'true'
      run: |
        sed -i "s/^appVersion:.*/appVersion: $DECONZ_APPVERSION/" ./charts/deconz/Chart.yaml

    - name: Update OpenHAB appVersion
      if: env.openhab_changed == 'true'
      run: |
        sed -i "s/^appVersion:.*/appVersion: $OPENHAB_APPVERSION/" ./charts/openhab/Chart.yaml

    - name: Update Chart version of modified charts
      run: |
        ([[ -f .github/latest_running_sha ]] && lastcommit=$(cat .github/latest_running_sha) && echo "Latest commit was $lastcommit") || (no_commit="true" && echo "No previous commit; bumping versions")
        for app in ./charts/*; do
        if [[ $no_commit == "true" ]]; then
          echo "No commit history; updating chart version in $app/Chart.yaml."
          CHARTVER=$(sed -n  '/^version:.*/p' $app/Chart.yaml | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
          sed -i "s/^version:.*/$CHARTVER/" $app/Chart.yaml
          echo "version_change=true" >> $GITHUB_ENV
          echo "Current version of $app: $(sed -n  '/^version:.*/p' $app/Chart.yaml)"
          break
        else
          for file in $(git diff --name-only $lastcommit HEAD); do
            if [[ $file == $app/* ]]; then
              echo  "Updating chart version for $app in $app/Chart.yaml"
              CHARTVER=$(sed -n  '/^version:.*/p' $app/Chart.yaml | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
              sed -i "s/^version:.*/$CHARTVER/" $app/Chart.yaml
              echo "version_change=true" >> $GITHUB_ENV
              echo "Current version of $app: $(sed -n  '/^version:.*/p' $app/Chart.yaml)"
              break
            fi
          done
        fi
        done

    - name: Evaluate if chart should be released
      if: |
        env.version_change == 'true' ||
        github.event_name == 'push'
      run: |
        echo "chart_needed=true" >> $GITHUB_ENV

    - name: Set up Helm
      if: env.chart_needed == 'true'

      uses: azure/setup-helm@v3
      with:
        version: v3.9.2

    - name: Add current commit SHA to file and commit all changes
      id: commit
      if: env.version_change == 'true'
      run: |
        echo "$GITHUB_SHA" > .github/latest_running_sha
        git config --local user.email "github-actions@github.com"
        git config --local user.name "github-actions"
        git commit -m "Updating appVersion(s)" -a
        echo "Committing changes to repository"
        echo "push=true" >> $GITHUB_ENV

      shell: bash

    - uses: actions/setup-python@v4
      if: env.chart_needed == 'true'
      with:
        python-version: 3.7

    - name: Set up chart-testing
      if: env.chart_needed == 'true'
      uses: helm/chart-testing-action@v2.2.1

    - name: Run chart-testing (list-changed)
      if: env.chart_needed == 'true'
      id: list-changed
      run: |
        changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
        if [[ -n "$changed" ]]; then
          echo "list_changed=true" >> $GITHUB_ENV
        fi

    - name: Run chart-testing (lint)
      if: env.chart_needed == 'true'
      run: ct lint --target-branch ${{ github.event.repository.default_branch }}

    - name: Create kind cluster
      uses: helm/kind-action@v1.2.0
      if: env.list-changed == 'true'

    - name: Run chart-testing (install)
      if: env.chart_needed == 'true'
      run: ct install

    - name: Push changes once tests have succeeded
      if: env.push == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run chart-releaser
      if: env.chart_needed == 'true'
      uses: helm/chart-releaser-action@v1.4.1
      env:
        CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"